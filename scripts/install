#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# INITIALIZE AND STORE SETTINGS
#=================================================

# If you need to, you can define custom settings
# (or remove this section entirely if not relevant for you)
redis_db=$(ynh_redis_get_free_db)
celery_redis_db=$(ynh_redis_get_free_db)
livekit_secret_key=$(ynh_string_random -l 32)
django_secret_key=$(ynh_string_random -l 32)
ynh_app_setting_set --key=redis_db --value=$redis_db
ynh_app_setting_set --key=celery_redis_db --value=$celery_redis_db
ynh_app_setting_set --key=livekit_secret_key --value=$livekit_secret_key
ynh_app_setting_set --key=django_secret_key --value=$django_secret_key


#=================================================
# INSTALL DEX APP FOR OAUTH2 / OIDC
#=================================================
ynh_script_progression "Installing Dex..."

oidc_secret=$(ynh_string_random -l 32)
oidc_name="$app"
oidc_callback="$domain/api/v1.0/callback/"

if yunohost app list | grep -q "$dex_domain$dex_path"; then
	ynh_die "The domain provided for Dex is already used by another app. Please chose another one !"
fi

yunohost app install https://github.com/YunoHost-Apps/dex_ynh/tree/$dex_ynh_commit --force --args "domain=$dex_domain&path=$dex_path&oidc_name=$oidc_name&oidc_secret=$oidc_secret&oidc_callback=$oidc_callback" 2>&1 | tee dexlog.txt
dex_app=$(grep -Po 'Installation of\s+\K.*(?=\s+completed)' dexlog.txt)
rm dexlog.txt

if [ -z "$dex_app" ]; then
  ynh_die "Dex package installation failed"
fi

# Create Dex URIs
if [ "$dex_path" = "/" ]
then
	dex_auth_uri="https://$dex_domain/auth"
	dex_token_uri="https://$dex_domain/token"
	dex_user_uri="https://$dex_domain/userinfo"
else
	dex_auth_uri="https://$dex_domain$dex_path/auth"
	dex_token_uri="https://$dex_domain$dex_path/token"
	dex_user_uri="https://$dex_domain$dex_path/userinfo"	
fi

ynh_app_setting_set --key=dex_app --value=$dex_app
ynh_app_setting_set --key=dex_auth_uri --value=$dex_auth_uri
ynh_app_setting_set --key=dex_token_uri --value=$dex_token_uri
ynh_app_setting_set --key=dex_user_uri --value=$dex_user_uri

#=================================================
# INSTALL NODEJS
#=================================================

ynh_script_progression "Installing dependencies..."

ynh_nodejs_install

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."


ynh_setup_source --dest_dir="$install_dir" --source_id="main"
ynh_setup_source --dest_dir="$install_dir/livekit" --source_id="livekit"
### downloaded from an upstream source, like a git repository.
### `ynh_setup_source` use the file manifest.toml

# Download, check integrity, uncompress and patch the source from manifest.toml
ynh_setup_source --dest_dir="$install_dir"

ynh_exec_as_app mkdir -p "$install_dir/_build/venv"
ynh_exec_as_app mkdir -p "$install_dir/_build/frontend"
ynh_exec_as_app mkdir -p "$install_dir/_build/data/static"

pushd "$install_dir/_build/venv"
  ynh_exec_as_app python -m venv .
  ynh_exec_as_app ./bin/pip install ../../src/backend
popd

pushd "$install_dir/src/backend"
  # Collect the static resources
  ynh_exec_as_app MEET_DATA_DIR="$install_dir/_build/data/static" DJANGO_CONFIGURATION=Build DJANGO_JWT_PRIVATE_SIGNING_KEY=Dummy \
    STATIC_ROOT="$install_dir/src/backend" \
    "$install_dir/_build/venv/bin/python" manage.py collectstatic --noinput
  rdfind -makesymlinks true -followsymlinks true -makeresultsfile false "$install_dir/_build/data/static"
  # Setup the database
  # FIXME: cleanup the env variables.
  ynh_exec_as_app \
    MEET_DATA_DIR="$install_dir/_build/data/static" DJANGO_CONFIGURATION=Build DJANGO_JWT_PRIVATE_SIGNING_KEY=Dummy \
    STATIC_ROOT="$install_dir/src/backend" \
    DB_NAME=$db_name DB_USER=$db_name DB_PASSWORD=$db_pwd \
    "$install_dir/_build/venv/bin/python" manage.py migrate

popd

pushd "$install_dir/src/frontend"
  ynh_hide_warnings ynh_exec_as_app npm ci
  ynh_hide_warnings ynh_exec_as_app NODE_ENV=production VITE_API_BASE_URL="https://${domain}" npm run build -- --outDir="$install_dir/_build/frontend" --emptyOutDir
popd


chown -R "$app:www-data" "$install_dir"

#=================================================
# APP INITIAL CONFIGURATION
#=================================================
ynh_script_progression "Adding $app's configuration files..."

ynh_config_add --template="env" --destination="$install_dir/.env"

ynh_config_add --template="livekit.yaml" --destination="$install_dir/livekit/livekit.yaml"

chmod 400 "$install_dir/livekit/livekit.yaml"
chown "$app:$app" "$install_dir/livekit/livekit.yaml"

ynh_config_add --template="meet.py" --destination="$install_dir/meet-conf.py"
chmod 400 "$install_dir/meet-conf.py"
chown "$app:$app" "$install_dir/meet-conf.py"

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Adding system configurations related to $app..."

ynh_config_add_nginx

### `ynh_config_add_systemd` is used to configure a systemd script for an app.
### It can be used for apps that use sysvinit (with adaptation) or systemd.
### Have a look at the app to be sure this app needs a systemd script.
### `ynh_config_add_systemd` will use the file conf/systemd.service
### If you're not using these lines:
###   - You can remove those files in conf/.
###   - Remove the section "BACKUP SYSTEMD" in the backup script
###   - Remove also the section "STOP AND REMOVE SERVICE" in the remove script
###   - As well as the section "RESTORE SYSTEMD" in the restore script
###   - And the section "SETUP SYSTEMD" in the upgrade script

# Create a dedicated systemd config
ynh_config_add_systemd
ynh_config_add_systemd --service="${app}-livekit" --template="systemd-livekit.service"

yunohost service add "$app" --description="A short description of the app" --log="/var/log/$app/$app.log" --needs_exposed_ports "$port_tcp" "$port_livekit"

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

# Start a systemd service
ynh_systemctl --service="$app" --action="start"
ynh_systemctl --service="${app}-livekit" --action="start"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
