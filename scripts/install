#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

### Install parameters are automatically saved as settings
###
### Settings are automatically loaded as bash variables
### in every app script context, therefore typically these will exist:
### - $domain
### - $path
### - $language
### ... etc
###
### Resources defined in the manifest are provisioned prior to this script
### and corresponding settings are also available, such as:
### - $install_dir
### - $port
### - $db_name
### ...
###
### $app is the app id (i.e. 'example' for first install,
### or 'example__2', '__3'... for multi-instance installs)

#=================================================
# INITIALIZE AND STORE SETTINGS
#=================================================

# If you need to, you can define custom settings
# (or remove this section entirely if not relevant for you)
redis_db=$(ynh_redis_get_free_db)
celery_redis_db=$(ynh_redis_get_free_db)
livekit_secret_key=$(ynh_string_random -l 32)
django_secret_key=$(ynh_string_random -l 32)
ynh_app_setting_set --key=redis_db --value=$redis_db
ynh_app_setting_set --key=celery_redis_db --value=$celery_redis_db
ynh_app_setting_set --key=livekit_secret_key --value=$livekit_secret_key
ynh_app_setting_set --key=django_secret_key --value=$django_secret_key


#=================================================
# INSTALL DEX APP FOR OAUTH2 / OIDC
#=================================================
ynh_script_progression "Installing Dex..."

oidc_secret=$(ynh_string_random -l 32)
oidc_name="$app"
oidc_callback="$domain/api/v1.0/callback/"

if yunohost app list | grep -q "$dex_domain$dex_path"; then
	ynh_die "The domain provided for Dex is already used by another app. Please chose another one !"
fi

yunohost app install https://github.com/YunoHost-Apps/dex_ynh/tree/$dex_ynh_commit --force --args "domain=$dex_domain&path=$dex_path&oidc_name=$oidc_name&oidc_secret=$oidc_secret&oidc_callback=$oidc_callback" 2>&1 | tee dexlog.txt
dex_app=$(gawk 'match($0, /Installation of (.+) completed/, app) {print app[1]}' dexlog.txt)
rm dexlog.txt

# Create Dex URIs
if [ "$dex_path" = "/" ]
then
	dex_auth_uri="https://$dex_domain/auth"
	dex_token_uri="https://$dex_domain/token"
	dex_user_uri="https://$dex_domain/userinfo"
else
	dex_auth_uri="https://$dex_domain$dex_path/auth"
	dex_token_uri="https://$dex_domain$dex_path/token"
	dex_user_uri="https://$dex_domain$dex_path/userinfo"	
fi

ynh_app_setting_set --key=dex_app --value=$dex_app
ynh_app_setting_set --key=dex_auth_uri --value=$dex_auth_uri
ynh_app_setting_set --key=dex_token_uri --value=$dex_token_uri
ynh_app_setting_set --key=dex_user_uri --value=$dex_user_uri

#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression "Configuring firewall..."

# Reserve UDP Port range
ynh_hide_warnings yunohost firewall allow UDP 50000:60000

#=================================================
# INSTALL NODEJS
#=================================================

ynh_script_progression "Installing dependencies..."

ynh_nodejs_install

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."


ynh_setup_source --dest_dir="$install_dir" --source_id="main"
ynh_setup_source --dest_dir="$install_dir/livekit" --source_id="livekit"
### downloaded from an upstream source, like a git repository.
### `ynh_setup_source` use the file manifest.toml

# Download, check integrity, uncompress and patch the source from manifest.toml
ynh_setup_source --dest_dir="$install_dir"

patch -p1 -d "$install_dir" < ../conf/settings.py.patch
patch -p1 -d "$install_dir" < ../conf/authentication.patch

ynh_exec_as_app mkdir -p "$install_dir/_build/venv"
ynh_exec_as_app mkdir -p "$install_dir/_build/frontend"
ynh_exec_as_app mkdir -p "$install_dir/_build/data/static"

pushd "$install_dir/_build/venv"
  ynh_exec_as_app python -m venv .
  ynh_exec_as_app ./bin/pip install ../../src/backend
popd

pushd "$install_dir/src/backend"
  # Collect the static resources
  ynh_exec_as_app MEET_DATA_DIR="$install_dir/_build/data/static" DJANGO_CONFIGURATION=Build DJANGO_JWT_PRIVATE_SIGNING_KEY=Dummy \
    STATIC_ROOT="$install_dir/src/backend" \
    "$install_dir/_build/venv/bin/python" manage.py collectstatic --noinput
  rdfind -makesymlinks true -followsymlinks true -makeresultsfile false "$install_dir/_build/data/static"
  # Setup the database
  # FIXME: cleanup the env variables.
  ynh_exec_as_app \
    MEET_DATA_DIR="$install_dir/_build/data/static" DJANGO_CONFIGURATION=Build DJANGO_JWT_PRIVATE_SIGNING_KEY=Dummy \
    STATIC_ROOT="$install_dir/src/backend" \
    DB_NAME=$db_name DB_USER=$db_name DB_PASSWORD=$db_pwd \
    "$install_dir/_build/venv/bin/python" manage.py migrate

popd

pushd "$install_dir/src/frontend"
  ynh_hide_warnings ynh_exec_as_app npm ci
  ynh_hide_warnings ynh_exec_as_app NODE_ENV=production VITE_API_BASE_URL="https://${domain}" npm run build -- --outDir="$install_dir/_build/frontend" --emptyOutDir
popd


### $install_dir will automatically be initialized with some decent
### permission by default... however, you may need to recursively reapply
### ownership to all files such as after the ynh_setup_source step
chown -R "$app:www-data" "$install_dir"

#=================================================
# APP INITIAL CONFIGURATION
#=================================================
ynh_script_progression "Adding $app's configuration files..."

ynh_config_add --template="env" --destination="$install_dir/.env"

ynh_config_add --template="livekit.yaml" --destination="$install_dir/livekit/livekit.yaml"
# FIXME: 
# - should also be given access to parent
# - don't forget to cleanup in remove script
# setfacl -m u:$app:r /etc/yunohost/certs/$turn_domain/crt.pem
# setfacl -m u:$app:r /etc/yunohost/certs/$turn_domain/key.pem

# FIXME: this should be handled by the core in the future
### You may need to use chmod 600 instead of 400,
### for example if the app is expected to be able to modify its own config
chmod 400 "$install_dir/livekit/livekit.yaml"
chown "$app:$app" "$install_dir/livekit/livekit.yaml"

ynh_config_add --template="meet.py" --destination="$install_dir/meet-conf.py"
chmod 400 "$install_dir/meet-conf.py"
chown "$app:$app" "$install_dir/meet-conf.py"

### For more complex cases where you want to replace stuff using regexes,
### you shoud rely on ynh_replace (which is basically a wrapper for sed)
### When doing so, you also need to manually call ynh_store_file_checksum
###
### ynh_replace --match="match_string" --replace="replace_string" --file="$install_dir/some_config_file"
### ynh_store_file_checksum "$install_dir/some_config_file"

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Adding system configurations related to $app..."

### `ynh_config_add_phpfpm` is used to set up a PHP config.
### You can remove it if your app doesn't use PHP.
### `ynh_config_add_phpfpm` will use the files conf/extra_php-fpm.conf
### If you're not using these lines:
###   - You can remove these files in conf/.
###   - Remove the section "BACKUP THE PHP-FPM CONFIGURATION" in the backup script
###   - Remove also the section "REMOVE PHP-FPM CONFIGURATION" in the remove script
###   - As well as the section "RESTORE THE PHP-FPM CONFIGURATION" in the restore script
###     with the reload at the end of the script.
###   - And the section "PHP-FPM CONFIGURATION" in the upgrade script

# Create a dedicated NGINX config using the conf/nginx.conf template
# FIXME:
ynh_config_add_nginx

### `ynh_config_add_systemd` is used to configure a systemd script for an app.
### It can be used for apps that use sysvinit (with adaptation) or systemd.
### Have a look at the app to be sure this app needs a systemd script.
### `ynh_config_add_systemd` will use the file conf/systemd.service
### If you're not using these lines:
###   - You can remove those files in conf/.
###   - Remove the section "BACKUP SYSTEMD" in the backup script
###   - Remove also the section "STOP AND REMOVE SERVICE" in the remove script
###   - As well as the section "RESTORE SYSTEMD" in the restore script
###   - And the section "SETUP SYSTEMD" in the upgrade script

# Create a dedicated systemd config
ynh_config_add_systemd
ynh_config_add_systemd --service="${app}-livekit" --template="systemd-livekit.service"

### `yunohost service add` integrates a service in YunoHost. It then gets
### displayed in the admin interface and through the others `yunohost service` commands.
### (N.B.: this line only makes sense if the app adds a service to the system!)
### If you're not using these lines:
###   - You can remove these files in conf/.
###   - Remove the section "REMOVE SERVICE INTEGRATION IN YUNOHOST" in the remove script
###   - As well as the section "INTEGRATE SERVICE IN YUNOHOST" in the restore script
###   - And the section "INTEGRATE SERVICE IN YUNOHOST" in the upgrade script

### Additional options starting with 3.8:
###
### --needs_exposed_ports "$port" a list of ports that needs to be publicly exposed
###                               which will then be checked by YunoHost's diagnosis system
###                               (N.B. DO NOT USE THIS if the port is only internal!!!)
###
### --test_status "some command"  a custom command to check the status of the service
###                               (only relevant if 'systemctl status' doesn't do a good job)
###
### --test_conf "some command"    some command similar to "nginx -t" that validates the conf of the service
###
### Re-calling 'yunohost service add' during the upgrade script is the right way
### to proceed if you later realize that you need to enable some flags that
### weren't enabled on old installs (be careful it'll override the existing
### service though so you should re-provide all relevant flags when doing so)
yunohost service add "$app" --description="A short description of the app" --log="/var/log/$app/$app.log" --needs_exposed_ports "$port_tcp" "$port_livekit"

### `ynh_config_add_logrotate` is used to configure a logrotate configuration for the logs of this app.
### Use this helper only if there is effectively a log file for this app.
### If you're not using this helper:
###   - Remove the section "BACKUP LOGROTATE" in the backup script
###   - Remove also the section "REMOVE LOGROTATE CONFIGURATION" in the remove script
###   - As well as the section "RESTORE THE LOGROTATE CONFIGURATION" in the restore script
###   - And the section "SETUP LOGROTATE" in the upgrade script

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate

# Create a dedicated Fail2Ban config
# ynh_config_add_fail2ban --logpath="/var/log/nginx/${domain}-error.log" --failregex="Regex to match into the log for a failed login"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

### `ynh_systemctl` is used to start a systemd service for an app.
### Only needed if you have configure a systemd service
### If you're not using these lines:
###   - Remove the section "STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the backup script
###   - As well as the section "START SYSTEMD SERVICE" in the restore script
###   - As well as the section"STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the upgrade script
###   - And the section "STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the change_url script

# Start a systemd service
ynh_systemctl --service="$app" --action="start"
ynh_systemctl --service="${app}-livekit" --action="start"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
